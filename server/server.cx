#package corto/web/server

string random(uint16 n)
string typedescriptor(lang/type type)

class Service

// Abstraction for server-side HTTP. Multiple services (like REST, DDP, custom)
// may use the same HTTP instance to avoid using multiple ports.
// There can only be one HTTP server active per port, per process. A maximum of
// 64 servers can be active per process.
class HTTP::
    enum Method:: None, Get, Head, Post, Put, Delete, Trace, Options, Connect, Patch

    // Manages connection & user data
    class Connection::
        udata: object
        server: HTTP
        conn: word, private|local
        void write(string msg)

    // Provides request data and reply interface. Use delegate interface so that
    // a Request instance can live on the stack (overridable methods can only be
    // used on objects when RTTI is available).
    struct Request::
        // Delegate types
        void d_setHeader(Request r, string key, string val) delegate
        void d_setStatus(Request r, uint16 status) delegate
        void d_reply(Request r, string msg) delegate
        void d_sendFile(Request r, string file) delegate
        string d_getHeader(Request r, string key) delegate
        string d_getVar(Request r, string key) delegate

        // Method wrappers for delegate
        void setHeader(string key, string val)
        void setStatus(uint16 status)
        void setCookie(string key, string value)
        void reply(string msg)
        void badRequest(string msg)
        void sendfile(string file)
        string getHeader(string key)
        string getVar(string key)
        string getCookie(string key)

        // Request members
        uri: string
        method: HTTP/Method
        conn: word, private|local
        file: bool, private|local
        garbage: list{string}, private|local // to clean when request is done
        ctx: word, private|local

        // Delegate members
        m_setHeader: d_setHeader, private|local
        m_setStatus: d_setStatus, private|local
        m_reply: d_reply, private|local
        m_sendFile: d_sendfile, private|local
        m_getHeader: d_getHeader, private|local
        m_getVar: d_getVar, private|local

    port: uint16
    pollInterval: uint16
    pollServiceRate: uint16
    services: list{Service}, private|local
    connections: list{Connection}, private|local
    pollCount: uint16, private|local

    // Register a service with the server
    void addService(Service s)

    // Unregister a service with the server
    void removeService(Service s)

    // Acquire singleton server for specified port
    HTTP get(uint16 port) function

    // Set a singleton server for a specific port. Returns true if success,
    // false when the slot is already occupied. When NULL is provided for server
    // the slot is reset, and the function will always return TRUE.
    bool set(uint16 port, HTTP server) function

    // Write a websocket message to an open connection
    void write(HTTP::Connection c, string msg) overridable

    // Write a message to all open connections
    void broadcast(string msg)

    // Private methods
    void doOpen(HTTP::Connection c)
    void doClose (HTTP::Connection c)
    void doRequest(HTTP::Connection c, HTTP::Request r)
    void doMessage(HTTP::Connection c, string msg)
    void doPoll()

    void destruct()

// Standalone HTTP server
class StandaloneHTTP: HTTP::
    thread: word, private|local
    server: word, private|local
    exiting: bool, private|local

    enable_ssl : bool, hidden
    ssl_cert : string, hidden
    ssl_pkey : string, hidden

    int16 construct()
    void destruct()
    void write(HTTP::Connection c, string msg)

class StandaloneHTTPS : StandaloneHTTP::
    alias ssl_cert : StandaloneHTTP/ssl_cert
    alias ssl_pkey : StandaloneHTTP/ssl_pkey

    int16 construct()
    void destruct()

// Service built on top of an HTTP instance
class Service::
    port: uint16
    prefix: string
    server: HTTP, private|local

    int16 construct()
    void destruct()

    void onOpen(HTTP::Connection c) overridable
    void onClose(HTTP::Connection c) overridable
    int16 onRequest(HTTP::Connection c, HTTP::Request r, string uri) overridable
    int16 onGet(HTTP::Connection c, HTTP::Request r, string uri) overridable
    int16 onPost(HTTP::Connection c, HTTP::Request r, string uri) overridable
    int16 onPut(HTTP::Connection c, HTTP::Request r, string uri) overridable
    int16 onDelete(HTTP::Connection c, HTTP::Request r, string uri) overridable
    void onMessage(HTTP::Connection c, string msg) overridable
    void onPoll() overridable

// Service that serves up static content
class Files: Service::
    path: string
    int16 construct()
    int16 onRequest(HTTP::Connection c, HTTP::Request r, string uri) override

